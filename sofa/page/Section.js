/*global x, java */
"use strict";


x.page.Section = x.base.Base.clone({
    id                      : "Section",
    visible                 : true,
    width                   : "100%",
    tb_span                 : 12,        // replacing width
    right_align_numbers     : false
});
x.page.Section.doc = {
    location                : "x.sections",
    file                    : "$Header: /rsl/rsl_app/core/page/Section.js,v 1.23 2014/07/22 07:50:57 francis Exp $",
    purpose                 : "To represent a component of a page with display content",
    properties              : {
        title               : { label: "Text to use as the title of this Section", type: "string", usage: "Optional in spec" },
        generated_title     : { label: "Text generated by the system to use if title is not specified", type: "string", usage: "read only" },
        text                : { label: "Text to display underneath the title, before any other content", type: "string", usage: "Optional in spec" },
        visible             : { label: "Whether or not to show this Section, defaults true", type: "boolean", usage: "Optional in spec" },
        hide_section_if_empty: { label: "Only render the section if it has content (defaults to false)", type: "boolean", usage: "can edit" },
    }
};

x.page.Section.setup = function () {
    x.log.functionStart("setup", this, arguments);
};
x.page.Section.setup.doc = {
    purpose: "Inheritance hook for one-time initialisation logic for this page section; called by x.Page.setup() before setupCall()",
    args   : "none",
    returns: "nothing"
};

x.page.Section.update = function (param) {
    x.log.functionStart("update", this, arguments);
};
x.page.Section.update.doc = {
    purpose: "Inheritance hook for repeatable logic for this page section; called by x.Page.updateSections(params)",
    args   : "params - object map of string/string pairs of the parameters sent to the server in this request/response cycle; note that field objects will have already been updated from them by this point",
    returns: "nothing"
};


x.page.Section.presave = function () {
    x.log.functionStart("presave", this, arguments);
};
x.page.Section.presave.doc = {
    purpose: "Inheritance hook for one-time pre-save logic for this page section; called by x.Page.presave(), if save is triggered (e.g. by params.page_button = 'save') and standard validations all pass",
    returns: "nothing"
};


x.page.Section.render = function (element, render_opts) {
    x.log.functionStart("render", this, arguments);
    this.sctn_elem = null;
    this.parent_elem = element;
    if (!this.hide_section_if_empty) {
        this.getSectionElement(render_opts);
    }
};
x.page.Section.render.doc = {
    purpose: "Begin render logic for this page section, call this.getSectionElement() to create the other div for the section, unless this.hide_section_if_empty is set to suppress this; called by x.Page.renderSections() is this.visible and other tab-related logic",
    args   : "x.XmlStream object representing the section-containing div; 'render_opts' object map that controls aspects of page appearance",
    returns: "nothing"
};


x.page.Section.getSectionElement = function (render_opts) {
    var temp_title;
    x.log.functionStart("getSectionElement", this, arguments);
    if (!this.sctn_elem) {
        this.sctn_elem = this.parent_elem.addChild("div", this.id, this.getCSSClass());
        temp_title = this.title || this.generated_title;
        if (temp_title) {
            this.sctn_elem.addChild("h2", null, "css_section_title").addText(temp_title);
        }
        if (this.text) {
            this.sctn_elem.addChild("div", null, "css_section_text").addText(this.text, true);    // Valid XML content
        }
    }
    return this.sctn_elem;
};
x.page.Section.getSectionElement.doc = {
    purpose: "To output the opening elements of the section on first call - the outer div, its title and introductory text, and sets this.sctn_elem which is used by subsequent render logic for the section; can be called repeatedly to return this.sctn_elem",
    args   : "'render_opts' object map that controls aspects of page appearance",
    returns: "x.XmlStream object representing the main div of the section, to which subsequent content should be added"
};


x.page.Section.getCSSClass = function (render_opts) {
    var css_class;
    x.log.functionStart("getCSSClass", this, arguments);
    css_class = "css_section css_section_" + (this.css_type_override || this.type) + " span" + this.tb_span;
    if (this.right_align_numbers) {
        css_class += " css_right_align_numbers";
    }
    return css_class;
};
x.page.Section.getCSSClass.doc = {
    purpose: "To determine the CSS class(es) for the div element of this page, including its tb_span, and whether or not numbers should be right-aligned",
    args   : "'render_opts' object map that controls aspects of page appearance",
    returns: "String content of the div element's CSS class attribute"
};

x.page.Section.isValid = function () {
    return true;
};
x.page.Section.isValid.doc = {
    purpose: "To report whether or not this section is entirely valid, to be overridden",
    args   : "none",
    returns: "true (to be overridden)"
};

//To show up in Chrome debugger...
//@ sourceURL=page/Section.js